import logging
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from sqlalchemy.inspection import inspect

from app.models import User
from app.config import bot

from .common import (
    get_user_from_db,
    safe_message_answer,
    safe_message_edit,
    start_handler,
    format_user_data
)

router = Router()

@router.message(Command("myprofile"))
async def show_profile_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await safe_message_answer(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ (/cancel) –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")
        return

    telegram_id = message.from_user.id
    loading_msg = await safe_message_answer(message, "\ud83d\udd0d –ó–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å...")
    await bot.send_chat_action(chat_id=telegram_id, action="typing")
    user = await get_user_from_db(telegram_id)

    if user:
        columns = [c.key for c in inspect(User).mapper.column_attrs]
        user_data = {key: getattr(user, key) for key in columns}
        summary = format_user_data(user_data)
        await safe_message_edit(loading_msg, f"*–¢–≤–æ–π –ü—Ä–æ—Ñ–∏–ª—å:* ‚ú®\n\n{summary}", parse_mode="Markdown")
    else:
        await safe_message_edit(
            loading_msg,
            "–ü–æ—Ö–æ–∂–µ, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ü§î\n–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )

@router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: CallbackQuery, state: FSMContext):
    await safe_message_edit(
        callback,
        "–•–æ—Ä–æ—à–æ! –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.\n"
        "–≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ —Ç–≤–æ–∏ –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤."
    )
    await callback.answer()
    await asyncio.sleep(1.5)
    await safe_message_answer(
        callback,
        "–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ...", parse_mode="Markdown"
    )
    await asyncio.sleep(0.5)
    await start_handler(callback.message, state)
