import logging
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from sqlalchemy.inspection import inspect

from app.models import User
from app.config import bot
from app.db import async_session_factory
from app.keyboards import profile_kb, next_step_kb
from app.ui_elements import format_message
from app.handlers.common import (
    get_user_from_db,
    safe_message_answer,
    safe_message_edit,
    cmd_start,
)

router = Router()

# –ú–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
GOAL_MAPPING = {
    "mass": "üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "weight_loss": "‚öñÔ∏è –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",
    "strength": "üèÉ –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å–∏–ª—ã/–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
    "health": "‚ù§Ô∏è –û–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ",
    "other": "‚ú® –î—Ä—É–≥–æ–µ"
}

EXPERIENCE_MAPPING = {
    "newbie": "üî∞ –ù–æ–≤–∏—á–æ–∫ (–¥–æ 6 –º–µ—Å—è—Ü–µ–≤)",
    "intermediate": "ü•à –°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2 –≥–æ–¥–∞)",
    "advanced": "ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)"
}

GENDER_MAPPING = {
    "male": "üë® –ú—É–∂—Å–∫–æ–π",
    "female": "üë© –ñ–µ–Ω—Å–∫–∏–π",
    "skip": "ü§ê –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"
}

LOCATION_MAPPING = {
    "home": "üè† –î–æ–º",
    "gym": "üèãÔ∏è –¢—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª",
    "outdoor": "üå≥ –£–ª–∏—Ü–∞",
    "other": "üìç –î—Ä—É–≥–æ–µ"
}

def format_profile_value(value, mapping=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    if value is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    if mapping and value in mapping:
        return mapping[value]
    if isinstance(value, bool):
        return "–î–∞" if value else "–ù–µ—Ç"
    return str(value)

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """Displays user profile information."""
    user_id = message.from_user.id
    user = await get_user_from_db(user_id)
    
    if user:
        profile_text = (
            "üèãÔ∏è‚Äç‚ôÇÔ∏è *–í–∞—à –§–∏—Ç–Ω–µ—Å-–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"*–¶–µ–ª—å:* {format_profile_value(user.goal, GOAL_MAPPING)}\n"
            f"*–û–ø—ã—Ç:* {format_profile_value(user.experience, EXPERIENCE_MAPPING)}\n"
            f"*–ü–æ–ª:* {format_profile_value(user.gender, GENDER_MAPPING)}\n"
            f"*–í–æ–∑—Ä–∞—Å—Ç:* {format_profile_value(user.age)} –ª–µ—Ç\n"
            f"*–í–µ—Å:* {format_profile_value(user.weight)} –∫–≥\n"
            f"*–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:* {format_profile_value(user.frequency)}\n"
            f"*–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:* {format_profile_value(user.location, LOCATION_MAPPING)}\n"
        )
        
        if user.injuries and user.injury_details:
            profile_text += f"*–¢—Ä–∞–≤–º—ã:* {format_profile_value(user.injury_details)}\n"
        
        profile_text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏—è!"
            
        await message.answer(
            profile_text,
            parse_mode="Markdown",
            reply_markup=next_step_kb
        )
    else:
        not_found_msg = format_message(
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            "warning"
        )
        await message.answer(not_found_msg, parse_mode="HTML")

@router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    await callback.answer()
    await safe_message_answer(
        callback,
        "üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n–°–µ–π—á–∞—Å –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
        parse_mode="Markdown"
    )
    await asyncio.sleep(0.5)
    await cmd_start(callback.message, state)

@router.callback_query(F.data == "back_to_start")
async def back_to_start_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
    await callback.answer()
    await state.clear()
    await cmd_start(callback.message, state)
