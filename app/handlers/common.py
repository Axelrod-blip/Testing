import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state

# Import necessary functions/data (e.g., for fetching user profile)
# from app.db import get_user_profile_dict # Renamed hypothetical function
from app.handlers.onboarding import cmd_onboard, get_user_profile_dict # To reuse onboarding logic for /update
from app.ui_elements import format_message, format_profile

common_router = Router() # Renamed router instance

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOTAL_STEPS = 18
PROGRESS_BAR_LENGTH = 20
PROGRESS_EMOJIS = ["‚ö°Ô∏è", "üí™", "üéØ", "‚ú®", "üåü", "‚≠êÔ∏è", "üí´", "üå†"]
PROGRESS_MESSAGES = [
    "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...",
    "–°—É–ø–µ—Ä! –ò–¥–µ–º –¥–∞–ª—å—à–µ...",
    "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥...",
    "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ï—â–µ —á—É—Ç—å-—á—É—Ç—å..."
]

FUNNY_MESSAGES = {
    "start": [
        "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-—Ç—Ä–µ–Ω–µ—Ä, –∏ —è —É–∂–µ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è! üí™",
        "üéØ *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!* –Ø —Ç–≤–æ–π AI-—Ç—Ä–µ–Ω–µ—Ä, –∏ —è –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏—á—å –ª—é–±—ã—Ö —Ü–µ–ª–µ–π! ‚ú®",
        "üöÄ *–ü—Ä–∏–≤–µ—Ç, —Å–ø–æ—Ä—Ç—Å–º–µ–Ω!* –Ø —Ç–≤–æ–π AI-—Ç—Ä–µ–Ω–µ—Ä, –∏ –≤–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–µ–±—è –Ω–µ–æ—Ç—Ä–∞–∑–∏–º—ã–º! üí´"
    ],
}

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
def format_user_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    fields = {
        "name": "–ò–º—è",
        "gender": "–ü–æ–ª",
        "age": "–í–æ–∑—Ä–∞—Å—Ç",
        "height": "–†–æ—Å—Ç (—Å–º)",
        "weight": "–í–µ—Å (–∫–≥)",
        "goal": "–¶–µ–ª—å",
        "fitness_level": "–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
        "workouts_per_week": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é",
        "workout_place": "–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "has_injuries": "–ù–∞–ª–∏—á–∏–µ —Ç—Ä–∞–≤–º",
        "injuries_details": "–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–≤–º",
        "meals_per_day": "–ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å",
        "first_meal_time": "–í—Ä–µ–º—è 1-–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
        "last_meal_time": "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏",
        "food_allergies": "–ê–ª–ª–µ—Ä–≥–∏–∏",
        "excluded_foods": "–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
        "favorite_foods": "–õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
        "activity_level": "–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    }
    lines = []
    for key, label in fields.items():
        value = data.get(key)
        if value is not None:
            if key == "injuries_details" and data.get("has_injuries") == "–ù–µ—Ç":
                continue
            lines.append(f"*{label}:* {value}")
    return "\n".join(lines)

def get_progress_text(current_step: int) -> str:
    filled = "‚ñà" * current_step
    empty = "‚ñë" * (TOTAL_STEPS - current_step)
    emoji = PROGRESS_EMOJIS[current_step % len(PROGRESS_EMOJIS)]
    message = PROGRESS_MESSAGES[current_step % len(PROGRESS_MESSAGES)]
    return f"{emoji} *–ü—Ä–æ–≥—Ä–µ—Å—Å: [{filled}{empty}] {current_step}/{TOTAL_STEPS}*\n{message}\n"

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã cmd_profile ---
def format_user_profile(data: dict) -> str:
    """Formats user data for display (example structure based on onboarding). Placeholder for cmd_profile."""
    # Adapt this based on your actual User model and collected onboarding data
    fields = {
        # Keys should match those saved in save_onboarding_data
        "goal": "–¶–µ–ª—å",
        "experience": "–û–ø—ã—Ç",
        "gender": "–ü–æ–ª",
        "age": "–í–æ–∑—Ä–∞—Å—Ç",
        "weight": "–í–µ—Å (–∫–≥)",
        "frequency": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é",
        "injuries": "–ù–∞–ª–∏—á–∏–µ —Ç—Ä–∞–≤–º/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        "injury_details": "–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–≤–º",
        "location": "–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏–π",
        "location_details": "–î–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞",
        # Add other fields from your User model if necessary
    }
    lines = []
    for key, label in fields.items():
        value = data.get(key)
        if value is not None:
            # Specific formatting adjustments
            if key == "injuries":
                value = "–î–∞" if value else "–ù–µ—Ç"
            if key == "injury_details" and not data.get("injuries"): # Only show details if injuries=True
                continue
            if key == "location_details" and data.get("location") != "other": # Only show details if location=other
                continue
            lines.append(f"*{label}:* {value}")
    return "\n".join(lines)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@common_router.message(Command("start")) # Use renamed router
async def cmd_start(message: Message, state: FSMContext):
    await state.clear() # Clear any previous state
    # TODO: Add logic to check if user exists/is onboarded in DB
    
    start_message = format_message(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
        "–Ø –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ /onboard - –ó–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "‚Ä¢ /profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
        "info"
    )
    
    await message.answer(
        start_message,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@common_router.message(Command("cancel"), ~StateFilter(default_state)) # Use renamed router
async def cmd_cancel_state(message: Message, state: FSMContext):
    """Cancels the current active state."""
    current_state = await state.get_state()
    logging.info(f"Cancelling state {current_state} for user {message.from_user.id}")
    await state.clear()
    
    cancel_msg = format_message(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã.",
        "success"
    )
    
    await message.answer(
        cancel_msg, 
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@common_router.message(Command("cancel"), StateFilter(default_state)) # Use renamed router
async def cmd_cancel_no_state(message: Message):
    """Handles /cancel when no state is active."""
    no_state_msg = format_message(
        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        "info"
    )
    
    await message.answer(
        no_state_msg,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@common_router.message(Command("profile")) # Use renamed router
async def cmd_profile(message: Message):
    """Displays user profile information."""
    user_id = message.from_user.id
    
    try:
        user_data = await get_user_profile_dict(user_id)
        if user_data:
            profile_html = format_profile(user_data)
            await message.answer(profile_html, parse_mode="HTML")
        else:
            not_found_msg = format_message(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /onboard.",
                "warning"
            )
            await message.answer(not_found_msg, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Error fetching profile for user {user_id}: {e}")
        error_msg = format_message(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "error"
        )
        await message.answer(error_msg, parse_mode="HTML")

@common_router.message(Command("update")) # Use renamed router
async def cmd_update(message: Message, state: FSMContext):
    """Alias for the onboarding command to update user info."""
    update_msg = format_message(
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã", 
        "–°–µ–π—á–∞—Å –æ–±–Ω–æ–≤–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...",
        "info"
    )
    await message.answer(update_msg, parse_mode="HTML")
    # Reuse the onboarding start logic
    await cmd_onboard(message, state)

# –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ (–≤–Ω–µ FSM)
@common_router.message(F.text, StateFilter(default_state)) # Use renamed router
async def handle_unknown_text(message: Message):
    """Handles any text message when no state is active."""
    unknown_msg = format_message(
        "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ",
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /onboard - –ó–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "‚Ä¢ /profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        "warning"
    )
    
    await message.answer(unknown_msg, parse_mode="HTML")

# –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–æ–≤
@common_router.callback_query() # Use renamed router
async def handle_unknown_callback(callback: CallbackQuery):
    """Handles any callback query that doesn't match other handlers."""
    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data} –æ—Ç user {callback.from_user.id}")
    await callback.answer(
        "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", 
        show_alert=True
    )
    # Optionally try to delete the message with the outdated keyboard
    try:
        await callback.message.delete()
    except Exception as e:
        logging.warning(f"Could not delete message for unknown callback: {e}") # Log deletion error
        pass # Ignore if deletion fails (e.g., message too old)
