import logging
import random
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.exc import SQLAlchemyError
from aiogram.filters import Command

from app.models import User
from app.db import async_session_factory
from app.prompts import create_workout_prompt, create_meal_plan_prompt
from app.llm_service import generate_with_gemini
from app.keyboards import suggest_meal_plan_kb, suggest_workout_plan_kb, next_step_kb
from app.config import bot

from .common import get_user_from_db, safe_message_answer, safe_message_edit

router = Router()
print("‚úÖ plans.py –∑–∞–≥—Ä—É–∂–µ–Ω")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
GENERATING_WORKOUT_MSG = [
    "‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...",
    "üí™ –°–æ–∑–¥–∞—é –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π...",
    "üî• –ü–æ–¥–±–∏—Ä–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è..."
]
GENERATING_MEAL_MSG = [
    "üçè –°–æ—Å—Ç–∞–≤–ª—è—é —Ç–≤–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...",
    "ü•ó –°–æ–∑–¥–∞—é —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é...",
    "üçΩ –ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."
]

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ --- #

@router.callback_query(F.data == "create_workout")
async def create_workout_plan_handler(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    await callback.answer("–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
    loading_msg = await safe_message_answer(callback, random.choice(GENERATING_WORKOUT_MSG))
    await bot.send_chat_action(chat_id=telegram_id, action="typing")

    user = await get_user_from_db(telegram_id)
    if not user:
        await safe_message_edit(loading_msg, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å–Ω–∞—á–∞–ª–∞ (/start).")
        return

    try:
        prompt = create_workout_prompt(user.to_dict())
        generated_plan = await generate_with_gemini(prompt)

        if not generated_plan:
            raise ValueError("LLM returned empty workout plan")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –≤ –ë–î
        plan_saved = False
        try:
            async with async_session_factory() as session:
                user_to_update = await session.get(User, user.telegram_id)
                if user_to_update:
                    user_to_update.workout_plan = generated_plan
                    await session.commit()
                    logging.info(f"Workout plan saved for {telegram_id}")
                    plan_saved = True
                else:
                    logging.error(f"User {telegram_id} not found in session for workout plan update.")
        except SQLAlchemyError as e:
            logging.error(f"DB error saving workout plan for {telegram_id}: {e}")
        except Exception as e_inner:
            logging.error(f"Unexpected error saving workout plan {telegram_id}: {e_inner}", exc_info=True)

        result_text = f"üéâ *–¢–≤–æ–π –ü–ª–∞–Ω –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ì–æ—Ç–æ–≤!* üéâ\n\n{generated_plan}"
        if plan_saved:
            result_text += "\n\n‚úÖ *–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.*"
        else:
            result_text += "\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –°–∫–æ–ø–∏—Ä—É–π –µ–≥–æ —Å–µ–π—á–∞—Å.*"

        await safe_message_edit(loading_msg, result_text, parse_mode="Markdown")

        await asyncio.sleep(1)
        await safe_message_answer(
            callback,
            "‚ú® *–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!*\n\n–•–æ—á–µ—à—å —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç—å *–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è*? üëá",
            reply_markup=suggest_meal_plan_kb,
            parse_mode="Markdown"
        )

    except Exception as e:
        logging.error(f"Error generating/processing workout plan for {telegram_id}: {e}", exc_info=True)
        error_message = "üòî *–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
        if loading_msg:
            await safe_message_edit(loading_msg, error_message, parse_mode="Markdown")
        else:
            await safe_message_answer(callback, error_message, parse_mode="Markdown")

@router.callback_query(F.data == "create_meal_plan")
async def create_meal_plan_handler(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    await callback.answer("–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è...")
    loading_msg = await safe_message_answer(callback, random.choice(GENERATING_MEAL_MSG))
    await bot.send_chat_action(chat_id=telegram_id, action="typing")

    user = await get_user_from_db(telegram_id)
    if not user:
        await safe_message_edit(loading_msg, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å–Ω–∞—á–∞–ª–∞ (/start).")
        return

    try:
        prompt = create_meal_plan_prompt(user.to_dict())
        generated_plan = await generate_with_gemini(prompt)

        if not generated_plan:
            raise ValueError("LLM returned empty meal plan")

        plan_saved = False
        try:
            async with async_session_factory() as session:
                user_to_update = await session.get(User, user.telegram_id)
                if user_to_update:
                    user_to_update.meal_plan = generated_plan
                    await session.commit()
                    logging.info(f"Meal plan saved for {telegram_id}")
                    plan_saved = True
                else:
                    logging.error(f"User {telegram_id} not found in session for meal plan update.")
        except SQLAlchemyError as e:
            logging.error(f"DB error saving meal plan for {telegram_id}: {e}")
        except Exception as e_inner:
            logging.error(f"Unexpected error saving meal plan {telegram_id}: {e_inner}", exc_info=True)

        result_text = f"üçè *–¢–≤–æ–π –ü–ª–∞–Ω –ü–∏—Ç–∞–Ω–∏—è –ì–æ—Ç–æ–≤!* üçè\n\n{generated_plan}"
        if plan_saved:
            result_text += "\n\n‚úÖ *–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.*"
        else:
            result_text += "\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –°–∫–æ–ø–∏—Ä—É–π –µ–≥–æ —Å–µ–π—á–∞—Å.*"

        await safe_message_edit(loading_msg, result_text, parse_mode="Markdown")

        await asyncio.sleep(1)
        await safe_message_answer(
            callback,
            "‚ú® *–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!*\n\n–•–æ—á–µ—à—å —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç—å *–ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*? üëá",
            reply_markup=suggest_workout_plan_kb,
            parse_mode="Markdown"
        )

    except Exception as e:
        logging.error(f"Error generating/processing meal plan for {telegram_id}: {e}", exc_info=True)
        error_message = "üòî *–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
        if loading_msg:
            await safe_message_edit(loading_msg, error_message, parse_mode="Markdown")
        else:
            await safe_message_answer(callback, error_message, parse_mode="Markdown")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–æ–≤ --- #

@router.message(Command("myworkoutplan"))
async def show_workout_plan_handler(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    loading_msg = await safe_message_answer(message, "üîç –ò—â—É —Ç–≤–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
    await bot.send_chat_action(chat_id=telegram_id, action="typing")
    user = await get_user_from_db(telegram_id)

    if user and user.workout_plan:
        await safe_message_edit(loading_msg, f"*–¢–≤–æ–π –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ü–ª–∞–Ω –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:* üí™\n\n{user.workout_plan}", parse_mode="Markdown")
    elif user:
        await safe_message_edit(
            loading_msg,
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. ü§î\n"
            "–ó–∞–≤–µ—Ä—à–∏ –∞–Ω–∫–µ—Ç—É (/start) –∏ —Å–º–æ–∂–µ—à—å –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!",
            reply_markup=next_step_kb
        )
    else:
        await safe_message_edit(
            loading_msg,
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (/start), —á—Ç–æ–±—ã —è –º–æ–≥ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã üôÇ"
        )

@router.message(Command("mymealplan"))
async def show_meal_plan_handler(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    loading_msg = await safe_message_answer(message, "üîç –ò—â—É —Ç–≤–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
    await bot.send_chat_action(chat_id=telegram_id, action="typing")
    user = await get_user_from_db(telegram_id)

    if user and user.meal_plan:
        await safe_message_edit(loading_msg, f"*–¢–≤–æ–π –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ü–ª–∞–Ω –ü–∏—Ç–∞–Ω–∏—è:* ü•ó\n\n{user.meal_plan}", parse_mode="Markdown")
    elif user:
        await safe_message_edit(
            loading_msg,
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. ü§î\n"
            "–ó–∞–≤–µ—Ä—à–∏ –∞–Ω–∫–µ—Ç—É (/start) –∏ —Å–º–æ–∂–µ—à—å –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!",
            reply_markup=next_step_kb
        )
    else:
        await safe_message_edit(
            loading_msg,
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (/start), —á—Ç–æ–±—ã —è –º–æ–≥ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã üôÇ"
        )