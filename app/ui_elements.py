"""UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞."""
from aiogram.types import FSInputFile, InputMediaPhoto
from typing import Dict, Optional, Any

# --- –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –∏ –∏–∫–æ–Ω–∫–∏ ---
MESSAGE_ICONS = {
    "info": "‚ÑπÔ∏è",
    "success": "‚úÖ",
    "warning": "‚ö†Ô∏è",
    "error": "‚ùå",
    "workout": "üí™",
    "nutrition": "üçé",
    "progress": "üìä",
    "profile": "üë§"
}

# --- –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
def format_message(title: str, content: str, msg_type: str = "info") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        content: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ MESSAGE_ICONS
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    """
    icon = MESSAGE_ICONS.get(msg_type, "‚Ä¢")
    return f"{icon} <b>{title}</b>\n\n{content}"

def format_profile(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º HTML —Ñ–æ—Ä–º–∞—Ç–µ.
    
    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—è –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
    fields = {
        "goal": "–¶–µ–ª—å",
        "experience": "–û–ø—ã—Ç",
        "gender": "–ü–æ–ª",
        "age": "–í–æ–∑—Ä–∞—Å—Ç",
        "weight": "–í–µ—Å (–∫–≥)",
        "frequency": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é",
        "injuries": "–¢—Ä–∞–≤–º—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
        "injury_details": "–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–≤–º",
        "location": "–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏–π",
        "location_details": "–î–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞",
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    mapped_values = {
        "goal": {
            "mass": "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
            "weight_loss": "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",
            "strength": "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Å–∏–ª—ã/–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
            "health": "–û–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ",
            "other": "–î—Ä—É–≥–æ–µ"
        },
        "experience": {
            "newbie": "–ù–æ–≤–∏—á–æ–∫ (–¥–æ 6 –º–µ—Å—è—Ü–µ–≤)",
            "intermediate": "–°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2 –≥–æ–¥–∞)",
            "advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)"
        },
        "gender": {
            "male": "–ú—É–∂—Å–∫–æ–π",
            "female": "–ñ–µ–Ω—Å–∫–∏–π",
            "skip": "–ù–µ —É–∫–∞–∑–∞–Ω"
        },
        "location": {
            "home": "–î–æ–º",
            "gym": "–¢—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª",
            "outdoor": "–£–ª–∏—Ü–∞",
            "other": "–î—Ä—É–≥–æ–µ"
        }
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML
    lines = ["<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"]
    
    for key, label in fields.items():
        value = data.get(key)
        if value is None:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
        if key == "injury_details" and not data.get("injuries"):
            continue
        if key == "location_details" and data.get("location") != "other":
            continue
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥
        if key in mapped_values and value in mapped_values[key]:
            value = mapped_values[key][value]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
        if key == "injuries" and isinstance(value, bool):
            value = "–ï—Å—Ç—å" if value else "–ù–µ—Ç"
            
        lines.append(f"<i>{label}:</i> <code>{value}</code>")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    freq_index = next((i for i, line in enumerate(lines) if "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é" in line), -1)
    if freq_index > 0:
        lines.insert(freq_index, "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
    
    return "\n".join(lines)

def format_onboarding_complete() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    return format_message(
        "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω",
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/profile</code> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        "success"
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_goal_mapping() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–µ–ª–µ–π –∏ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    return {
        "üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã": "goal_mass",
        "‚öñÔ∏è –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞": "goal_weight_loss",
        "üèÉ –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å–∏–ª—ã/–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏": "goal_strength",
        "‚ù§Ô∏è –û–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ": "goal_health",
        "‚ú® –î—Ä—É–≥–æ–µ": "goal_other"
    }

def get_experience_mapping() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–ø—ã—Ç–∞ –∏ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    return {
        "üî∞ –ù–æ–≤–∏—á–æ–∫ (–¥–æ 6 –º–µ—Å—è—Ü–µ–≤)": "exp_newbie",
        "ü•à –°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2 –≥–æ–¥–∞)": "exp_intermediate",
        "ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)": "exp_advanced"
    }

def get_gender_mapping() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–ª–∞ –∏ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    return {
        "üë® –ú—É–∂—Å–∫–æ–π": "gender_male",
        "üë© –ñ–µ–Ω—Å–∫–∏–π": "gender_female",
        "ü§ê –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å": "gender_skip"
    }

def get_injuries_mapping() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç—Ä–∞–≤–º –∏ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    return {
        "‚úÖ –ù–µ—Ç": "injuries_no",
        "‚ö†Ô∏è –î–∞": "injuries_yes"
    }

def get_location_mapping() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    return {
        "üè† –î–æ–º": "loc_home",
        "üèãÔ∏è –¢—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª": "loc_gym",
        "üå≥ –£–ª–∏—Ü–∞": "loc_outdoor",
        "üìç –î—Ä—É–≥–æ–µ": "loc_other"
    } 